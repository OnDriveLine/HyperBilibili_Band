<import name="title-bar" src="../../components/TitleBar/TitleBar.ux"></import>
<import name="default-button" src="../../components/DefaultButton/DefaultButton.ux"></import>

<template>
  <div class="page">
    <title-bar title="专栏缓存"></title-bar>
    <image src="/common/articlesave_tips.png" style="margin-top: 35px"></image>
    <default-button margin-top="20px" text="阅读更多信息" @click="ReadMore"></default-button>
    <default-button margin-top="20px" primary="true" text="缓存" @click="Download"></default-button>
    <text style="margin-top: 50px"></text>
  </div>
</template>

<script>
import prompt from "@system.prompt"
import router from "@system.router"
export default {
  public: {
    cvtitle: "",
    cvid: ""
  },
  ReadMore(){
    router.push({
      uri: "pages/textdetail",
      params: {
        text: "既然你能点进这里，说明你肯定是希望了解更多有关此问题的原因。说的详细点，每当你使用搜索功能搜索专栏并点进来时，都会跳转到这个页面，而不是会动态检测你的手表RAM够不够再跳转，因为它永远都不可能够。为什么呢？目前小米发布的S系列手表，无论是S3还是S4 Sport，都只配备了32M内存，分配给快应用的内存，实际测试下来只有4M不到。再如此有限的内存中能够开发一个包含如此多功能的应用程序属实不易，目前几乎所有功能都是卡在内存爆炸的边缘运行的。而专栏渲染需要Html渲染器，Html渲染器使用递归的自定义组件进行渲染，这样一来，内存占用自然及其多。在搜索页，内存占用就已高达3.1M，而Html渲染器占用的内存约有2.2M，加起来已经严重超限了。因此我们只能采用缓存的方式，缓存下来再看，不必进入搜索页面占内存，也减少了网络请求带来的内存开销，这是目前唯一的办法。",
        titletext: "更多信息"
      }
    })
  },
  async Download(){
    prompt.showToast({
      message: "开始缓存"
    })
    var articleHtml = await this.$app.$def.biliclient.getArticle(this.cvid)
    console.log("articleHtml=" + articleHtml)
    var id = await this.$app.$def.savedcontent.SavedContentManager.storeContent(this.cvtitle, articleHtml, "article")
    console.log("id=" + id)
    prompt.showToast({
      message: "专栏 " + this.cvtitle + " 缓存完毕！存储id=" + id,
      duration: 5000
    })
  }
}
</script>

<style>
.page {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  position: absolute;
  width: 100%;
}
</style>