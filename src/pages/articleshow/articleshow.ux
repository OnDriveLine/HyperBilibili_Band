<import name="title-bar" src="../../components/TitleBar/TitleBar.ux"></import>
<import name="html-renderer" src="../../components/HtmlRenderer/HtmlRenderer.ux"></import>

<template>
  <div class="page">
    <title-bar title="专栏阅读" static></title-bar>
    <image style="position: absolute; margin-top: 245px" if="{{show_loading}}" src="{{anims.loading_src.value}}"></image>
    <div if="{{showarticle}}" class="articlebox">
      <div class="infobox">
        <text class="title">{{article.readInfo.title}}</text>
        <div class="infofield" static>
          <image src="/common/article_up.png" static></image>
          <text class="infofield_text">{{article.readInfo.author.name}}</text>
        </div>
        <div class="infofield" static>
          <image src="/common/article_clock.png" static></image>
          <text class="infofield_text" static>预计阅读用时</text>
          <text class="pinknum" style="margin-left: 5px">{{this.$app.$def.articletools.estimateReadingTime(article.readInfo.content)}}</text>
          <text class="infofield_text" style="margin-left: 5px" static>分钟</text>
        </div>
      </div>
      <div style="margin-top: 22px; width: 80%; justify-content: center">
        <html-renderer doms="{{article_content[current_page_num]}}" @open-image="OpenImage"></html-renderer>
      </div>
    </div>
    <text style="margin-top: 25px"></text>
  </div>
</template>

<script>
import router from "@system.router"
export default {
  public: {
    cvid: "cv1",
    offline: false,
    // 仅在离线模式（直读本地html）时需要传入该参数
    article_html: ""
  },
  private: {
    article: {},
    article_content: {},
    showarticle: false,
    show_loading: false,
    current_page_num: 0,
    max_page_num: 0,
    anims: {
      loading: null,
      loading_src: {value: "/common/seqanims/loadingWhite/icons8-loading_颜色反转-1.png"}
    }
  },
  OpenImage(evt){
    router.push({
      uri: "pages/picturedetail",
      params: {
        img_uri: evt.detail.src
      }
    })
  },
  SplitArticle(arr, split_count) {
    let result = [];
    for (let i = 0; i < arr.length; i += split_count) {
        result.push(arr.slice(i, i + split_count));
    }
    return result;
  },
  async LoadArticle() {
    this.show_loading = true
    this.anims.loading.start()

    let article_html = ""
    if(this.offline){
      article_html = this.article_html
    }
    else{
      article_html = await this.$app.$def.biliclient.getArticle(this.cvid)
    }

    const article = this.$app.$def.articletools.parseArticlePageHtml(article_html)
    this.article.readInfo = article.readInfo // 原地更新 减少开辟内存空间

    let article_full = this.$app.$def.htmlparser.parseContentHtml(article.readInfo.content)
    this.$app.$def.articletools.PatchArticleContent(article_full)

    this.article_content = this.SplitArticle(article_full, this.$app.$def.settings.SETTINGS.article_split_dom_count)
    this.max_page_num = this.article_content.length

    console.log(this.article_content)

    this.anims.loading.stop()
    this.show_loading = false
    global.runGC()
    this.showarticle = true
  },
  onInit() {
    this.anims.loading = new this.$app.$def.animengine.SequenceAnim(
      "articleShowPage",
      this.anims.loading_src,
      28,
      "/common/seqanims/loadingWhite/icons8-loading_颜色反转-*.png",
      1000,
      true
    )

    this.LoadArticle()
  }
}
</script>

<style>
.page {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  position: absolute;
  width: 100%;
}

.articlebox {
  flex-direction: column; 
  align-items: center; 
  width: 100%;
  margin-top: 25px;
}

.infobox {
  width: 75%;
  flex-direction: column;
  justify-content: flex-start;
}

.infofield {
  flex-direction: row;
  align-items: center;
}

.title {
  font-size: 34px;
  font-weight: 600;
}

.infofield_text {
  font-size: 18px;
  font-weight: 600;
  color: #9E9E9E;
  margin-left: 7px;
}

.pinknum {
  color: #FF7DA8;
  font-size: 18px;
  font-weight: 600;
}
</style>