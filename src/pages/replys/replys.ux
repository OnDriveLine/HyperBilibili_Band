<import name="title-bar" src="../../components/TitleBar/TitleBar.ux"></import>
<import name="reply" src="../../components/Reply/Reply.ux"></import>
<import name="full-screen-input" src="../../components/FullScreenInput/FullScreenInput.ux"></import>
<import
  name="floating-page-changer"
  src="../../components/FloatingPageChanger/FloatingPageChanger.ux"
></import>

<template>
  <div class="page">
    <title-bar title="{{titletext}}"></title-bar>
    <image style="position: absolute; margin-top: 245px" if="{{show_loading}}" src="{{anims.loading_src.value}}"></image>
    <list style="margin-top: 15px" class="replylist">
      <list-item type="replies"
        style="width: 100%; justify-content: center; margin-top: 10px; height: {{PlaceHolderShowCheck($item.rpid)}}"
        for="{{replies}}">
        <reply secmode={{secmode}} reply="{{$item}}" @show-tools="ShowTools" @reply="Reply"></reply>
      </list-item>
    </list>
    <floating-page-changer current_pn="{{current_pn}}" @backpn="BackPN" @nextpn="NextPN"></floating-page-changer>
    <full-screen-input if="{{replymode}}" @send="SendReply" @exit="ExitInput"></full-screen-input>
  </div>
</template>

<script>
import router from "@system.router"
import prompt from "@system.prompt"

export default {
  public: {
    type: 1,
    oid: "",
    replycount: 0,
    // 仅二级评论需要提供
    rootrpid: "",
    // 是否处在二级评论中
    secmode: false
  },
  private: {
    titletext: "评论区",
    replies: [],
    maxpn: 1,
    current_pn: 1,
    show_loading: false,
    anims: {
      loading: null,
      loading_src: {value: "/common/seqanims/loadingWhite/icons8-loading_颜色反转-1.png"}
    },
    replymode: false,
    reply_target: null,
  },
  async SendReply(evt) {
    this.replymode = false
    const content = evt.detail.content

    if (content.length === 0) {
      prompt.showToast({message: "评论内容不得为空！", duration: 2000})
      return
    }

    let result
    try {
      result = this.secmode
        ? await this.$app.$def.biliclient.GiveTreeReply(
            this.type,
            this.oid,
            this.reply_target,
            this.rootrpid,
            content
          )
        : await this.$app.$def.biliclient.GiveSecReply(
            this.type,
            this.oid,
            this.reply_target,
            content
          )

      if (result.code === 0) {
        prompt.showToast({message: "发送成功"})
      } else {
        prompt.showToast({
          message: `发送失败，错误代码：${result.code} 原因：${result.message}`,
          duration: 4000
        })
      }
    } catch (error) {
      console.error("发送评论时发生错误:", error)
      prompt.showToast({message: "发送失败，请重试。", duration: 4000})
    }
  },
  ExitInput() {
    this.replymode = false
  },
  Reply(evt) {
    this.replymode = true
    this.input_text.content = ""
    this.reply_target = evt.detail.rpid
  },
  ShowTools(evt) {
    const uri = this.secmode ? "pages/textdetail" : "pages/replytools"
    const params = this.secmode
      ? {text: evt.detail.reply.content.message, titletext: "评论详情"}
      : {type: this.type, oid: this.oid, reply: evt.detail.reply}

    router.push({uri, params})
  },
  PlaceHolderShowCheck(rpid) {
    return rpid === this.replies[this.replies.length - 1]?.rpid ? "315px" : "200px"
  },
  NextPN() {
    if (this.current_pn < this.maxpn) {
      this.current_pn++
      this.LoadReplies()
    }
  },
  BackPN() {
    if (this.current_pn > 1) {
      this.current_pn--
      this.LoadReplies()
    }
  },
  async LoadReplies() {
    this.replies = []
    this.show_loading = true
    this.anims.loading.start()

    try {
      const replyData = this.secmode
        ? await this.$app.$def.biliclient.getSecReplies(
            this.type,
            this.oid,
            this.rootrpid,
            this.current_pn
          )
        : await this.$app.$def.biliclient.getReplies(this.type, this.oid, this.current_pn)

      this.replies = replyData.replies
    } catch (error) {
      console.error("加载评论时发生错误:", error)
      prompt.showToast({message: "加载评论失败，请重试。", duration: 4000})
    } finally {
      this.anims.loading.stop()
      this.show_loading = false
      global.runGC()
    }
  },
  onInit() {
    this.maxpn = Math.ceil(this.replycount / 10)
    console.log("maxpn=", this.maxpn)

    this.anims.loading = new this.$app.$def.animengine.SequenceAnim(
      "replysPage",
      this.anims.loading_src,
      28,
      "/common/seqanims/loadingWhite/icons8-loading_颜色反转-*.png",
      1000,
      true
    )

    if (this.secmode) {
      this.titletext = "子评论"
    }

    this.LoadReplies()
  }
}
</script>

<style>
.page {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  position: absolute;
  width: 336px;
}

.replylist {
  width: 310px;
  height: 75%;
  align-items: center;
  justify-content: center;
}

.inputpanel {
  position: absolute;
  width: 336px;
  height: 100%;
  background-color: black;
  justify-content: center;
}

.inputactions {
  flex-direction: row;
  align-items: center;
  width: 128px;
  position: absolute;
  margin-top: 30px;
}

.inputaction_img {
  width: 35px;
  height: 35px;
  object-fit: scale-down;
}

.inputshow {
  width: 65%;
  position: absolute;
  margin-top: 100px;
}

.inputshow_text {
  font-size: 24px;
}
</style>